Nome: André Meneghelli Vale
NUSP: 4898948

MiniEP 5

Observações:

Foram utilizados os módulos padrão do python sys, readline, atexit e o módulo extra ply,
como está registrado no arquivo requeriments.txt.

É possível utilizar qualquer número do tipo float neste programa, 1.2e-15 por exemplo.

Foi utilizado o shebang "#! /usr/bin/env python3", perimitindo que o miniep5 e o
teste possam ser executados diretamente sem precisar passar como
parâmetro para o interpretador python.

Caso não exista resposta ao python3 no SO é necessário arrumar adequadamente ou enviar o
arquivo ao interpretador python adequado.

Não foi considerada a implementação do tratamento de números negativos, já que gera
ambiguidade na notação posfixa. Caso seja necessário realizar um teste deste tipo basta
substituir o número do zero, 0 3 - geraria o número -3.

Também foi desenvolvida a atribuição, que atribui o resultado de uma expressão a um NOME:
a 2 = a a * +
Atribui 2 à variável a e então calcula o restante da expressão.

Modos de execução:
a) Linha de comando:
    É possível executar o programa diretamente pela linha de comando:
    ./miniep.py "expressao"

b) Modo iterativo:
    É possível acessar o modo iterativo caso nenhum parâmetro seja passado via linha de
    comando. Uma vez que se esteja neste modo será possível visualizar "calc > " onde se
    espera a entrada de uma expressão manualmente pelo usuário. Para sair deste modo basta
    pressionar ctrl+c ou ctrl+d.
    
    Durante a execução do modo iterativo é gerado um histórico das expressões passadas pelo
    usuário no arquivo .history. O objetivo disto é facilitar os testes.

    Váriáveis inicializadas previamente podem ser reutilizadas em outras análises.

Teste:

Os módulos utilizados no teste foram os, random, unittest que estão contidos
na instalação padrão do python.

Ao implementar o modo de repasse de exceções foi possível utilizar .

Os testes se basearam em envio de expressões para testar algumas das propriedades dos operadores,
bem como a divisão por zero e a não comutatividade da subtração e da divisão.

A sintaxe também foi testada utilizando um gerador de expressões. Existe quatro testes para
de sintaxe: sintaxe correta, pilha maior que 1, operador utilizado em pilha com menos de dois
elementos, utilização de variável não inicializada, calculo conhecido com variável aleatória e
calculo aleatório com variávels.

Clean:

Para facilitar também foi gerado o shell script clean.sh que realiza a limpeza adequada do diretório.